{"ast":null,"code":"var _jsxFileName = \"/Users/phreetech13/Desktop/RealTimeAudioToText/src/components/Transcribe.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"../App.css\";\nimport { SlMicrophone } from \"react-icons/sl\";\nimport { pipeline } from '@xenova/transformers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Translate() {\n  _s();\n  const [playing, setPlaying] = useState(false);\n  const mediaRecorder = useRef(null);\n  const [audioChunks, setAudioChunks] = useState([]);\n  const [audio, setAudio] = useState(null);\n  const mimeType = \"audio/webm\";\n  const [transcribedText, setTranscribedText] = useState(\"\");\n  const apiName = \"realtimeaudiototextapi\";\n  const path = \"/transcribe\";\n  const transcribe = async url => {\n    const myInit = {\n      headers: {},\n      response: true,\n      body: {\n        fileUrl: url,\n        lang: \"english\"\n      }\n    };\n    let transcriber = await pipeline('automatic-speech-recognition', 'Xenova/whisper-small.en');\n    let result = await transcriber(url);\n    // Display the transcribed text here\n    console.log(result);\n  };\n  const getMicrophonePermission = async () => {\n    if (\"MediaRecorder\" in window) {\n      try {\n        const streamData = await navigator.mediaDevices.getUserMedia({\n          audio: true\n        });\n        return streamData;\n      } catch (err) {\n        alert(err.message);\n      }\n    } else {\n      alert(\"The MediaRecorder API is not supported in your browser.\");\n    }\n  };\n  const startRecording = async () => {\n    const stream = await getMicrophonePermission();\n    setPlaying(true);\n    const media = new MediaRecorder(stream, {\n      type: mimeType\n    });\n    mediaRecorder.current = media;\n    const localAudioChunks = [];\n    mediaRecorder.current.ondataavailable = event => {\n      if (typeof event.data === \"undefined\") return;\n      if (event.data.size === 0) return;\n      localAudioChunks.push(event.data);\n      setAudioChunks(localAudioChunks);\n    };\n    mediaRecorder.current.start(5000);\n  };\n\n  // const stopRecording = () => {\n  //   setPlaying(false);\n  //   mediaRecorder.current.stop();\n  //   mediaRecorder.current.onstop = () => {\n  //     const audioBlob = new Blob(audioChunks, { type: mimeType });\n  //     const audioUrl = URL.createObjectURL(audioBlob);\n  //     setAudio(audioUrl);\n  //     transcribe(audioUrl);\n  //     setAudioChunks([]);\n  //   };\n  // };\n\n  const stopRecording = () => {\n    setPlaying(false);\n    mediaRecorder.current.stop();\n    mediaRecorder.current.onstop = () => {\n      const audioBlob = new Blob(audioChunks, {\n        type: mimeType\n      });\n      const audioUrl = URL.createObjectURL(audioBlob);\n      setAudio(audioUrl);\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        const audioDataUrl = reader.result;\n        transcribe(audioDataUrl);\n        setAudioChunks([]);\n      };\n      reader.readAsDataURL(audioBlob);\n    };\n  };\n  useEffect(() => {\n    if (audioChunks.length > 0) {\n      const audioBlob = new Blob(audioChunks, {\n        type: mimeType\n      });\n      const audioUrl = URL.createObjectURL(audioBlob);\n      setAudio(audioUrl);\n    }\n  }, [audioChunks]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"translate-audio\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"translate-overlay\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"translated-words\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), audio && /*#__PURE__*/_jsxDEV(\"audio\", {\n        src: audio,\n        controls: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logic-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(Link, {\n          to: \"/\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"logic-btn-orange back-btn\",\n            children: \"back\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"logic-btn-orange\",\n          onClick: playing ? stopRecording : startRecording,\n          children: [/*#__PURE__*/_jsxDEV(SlMicrophone, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 13\n          }, this), playing ? \"Stop\" : \"Start\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n}\n_s(Translate, \"6lv8q4CnFJzjALML16kDCo2lX+o=\");\n_c = Translate;\nvar _c;\n$RefreshReg$(_c, \"Translate\");","map":{"version":3,"names":["React","useState","useRef","useEffect","Link","SlMicrophone","pipeline","jsxDEV","_jsxDEV","Translate","_s","playing","setPlaying","mediaRecorder","audioChunks","setAudioChunks","audio","setAudio","mimeType","transcribedText","setTranscribedText","apiName","path","transcribe","url","myInit","headers","response","body","fileUrl","lang","transcriber","result","console","log","getMicrophonePermission","window","streamData","navigator","mediaDevices","getUserMedia","err","alert","message","startRecording","stream","media","MediaRecorder","type","current","localAudioChunks","ondataavailable","event","data","size","push","start","stopRecording","stop","onstop","audioBlob","Blob","audioUrl","URL","createObjectURL","reader","FileReader","onloadend","audioDataUrl","readAsDataURL","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","src","controls","to","onClick","_c","$RefreshReg$"],"sources":["/Users/phreetech13/Desktop/RealTimeAudioToText/src/components/Transcribe.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"../App.css\";\nimport { SlMicrophone } from \"react-icons/sl\";\nimport { pipeline } from '@xenova/transformers';\n\nexport default function Translate() {\n  const [playing, setPlaying] = useState(false);\n  const mediaRecorder = useRef(null);\n  const [audioChunks, setAudioChunks] = useState([]);\n  const [audio, setAudio] = useState(null);\n  const mimeType = \"audio/webm\";\n  const [transcribedText, setTranscribedText] = useState(\"\"); \n\n  const apiName = \"realtimeaudiototextapi\";\n  const path = \"/transcribe\";\n\n  const transcribe = async (url) => {\n    const myInit = {\n      headers: {},\n      response: true,\n      body: {\n        fileUrl: url,\n        lang: \"english\"\n      },\n    };\n\n    let transcriber = await pipeline('automatic-speech-recognition', 'Xenova/whisper-small.en');\n    let result = await transcriber(url);\n    // Display the transcribed text here\n    console.log(result)\n  };\n\n  const getMicrophonePermission = async () => {\n    if (\"MediaRecorder\" in window) {\n      try {\n        const streamData = await navigator.mediaDevices.getUserMedia({\n          audio: true,\n        });\n        return streamData;\n      } catch (err) {\n        alert(err.message);\n      }\n    } else {\n      alert(\"The MediaRecorder API is not supported in your browser.\");\n    }\n  };\n\n  const startRecording = async () => {\n    const stream = await getMicrophonePermission();\n    setPlaying(true);\n    const media = new MediaRecorder(stream, { type: mimeType });\n    mediaRecorder.current = media;\n    const localAudioChunks = [];\n    mediaRecorder.current.ondataavailable = (event) => {\n      if (typeof event.data === \"undefined\") return;\n      if (event.data.size === 0) return;\n      localAudioChunks.push(event.data);\n      setAudioChunks(localAudioChunks);\n    };\n    mediaRecorder.current.start(5000);\n  };\n\n  // const stopRecording = () => {\n  //   setPlaying(false);\n  //   mediaRecorder.current.stop();\n  //   mediaRecorder.current.onstop = () => {\n  //     const audioBlob = new Blob(audioChunks, { type: mimeType });\n  //     const audioUrl = URL.createObjectURL(audioBlob);\n  //     setAudio(audioUrl);\n  //     transcribe(audioUrl);\n  //     setAudioChunks([]);\n  //   };\n  // };\n\n\n  const stopRecording = () => {\n    setPlaying(false);\n    mediaRecorder.current.stop();\n    mediaRecorder.current.onstop = () => {\n      const audioBlob = new Blob(audioChunks, { type: mimeType });\n      const audioUrl = URL.createObjectURL(audioBlob);\n      setAudio(audioUrl);\n  \n      const reader = new FileReader();\n      reader.onloadend = () => {\n        const audioDataUrl = reader.result;\n        transcribe(audioDataUrl);\n        setAudioChunks([]);\n      };\n      reader.readAsDataURL(audioBlob);\n    };\n  };\n\n  useEffect(() => {\n    if (audioChunks.length > 0) {\n      const audioBlob = new Blob(audioChunks, { type: mimeType });\n      const audioUrl = URL.createObjectURL(audioBlob);\n      setAudio(audioUrl);\n    }\n  }, [audioChunks]);\n\n  return (\n    <div className=\"translate-audio\">\n      <div className=\"translate-overlay\">\n        <div className=\"translated-words\">\n          {/* TODO: Display the transcribed text here */}\n          {/* <p>{transcribedText}</p> */}\n        </div>\n        {audio && <audio src={audio} controls />}\n        <div className=\"logic-buttons\">\n          <Link to=\"/\">\n            <button className=\"logic-btn-orange back-btn\">back</button>\n          </Link>\n          <button\n            className=\"logic-btn-orange\"\n            onClick={playing ? stopRecording : startRecording}\n          >\n            <SlMicrophone />\n            {playing ? \"Stop\" : \"Start\"}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}