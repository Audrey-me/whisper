{"ast":null,"code":"var _jsxFileName = \"/Users/phreetech13/Desktop/RealTimeAudioToText/src/components/Transcribe.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"../App.css\";\nimport { SlMicrophone } from \"react-icons/sl\";\nimport { pipeline } from '@xenova/transformers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Translate() {\n  _s();\n  const [playing, setPlaying] = useState(false);\n  const mediaRecorder = useRef(null);\n  const [audioChunks, setAudioChunks] = useState([]);\n  const [audio, setAudio] = useState(null);\n  const mimeType = \"audio/webm\";\n  const [transcribedText, setTranscribedText] = useState(\"\");\n  const startRecording = async () => {\n    const audioUrl = 'https://huggingface.co/datasets/Narsil/asr_dummy/resolve/main/mlk.flac';\n    setPlaying(true);\n    setAudio(audioUrl);\n    transcribe(audioUrl);\n  };\n  const stopRecording = () => {\n    setPlaying(false);\n    setAudio(null);\n    setTranscribedText(\"\");\n  };\n  const transcribe = async audioUrl => {\n    try {\n      const options = {\n        lang: \"english\"\n        // Add any additional options required by the transformer tool\n      };\n\n      const result = await pipeline('automatic-speech-recognition', 'Xenova/whisper-small.en')(audioUrl, options);\n      const transcribedResult = {\n        text: result.text\n      };\n      setTranscribedText(transcribedResult.text);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"translate-audio\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"translate-overlay\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"translated-words\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: transcribedText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), audio && /*#__PURE__*/_jsxDEV(\"audio\", {\n        src: audio,\n        controls: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logic-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(Link, {\n          to: \"/\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"logic-btn-orange back-btn\",\n            children: \"back\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"logic-btn-orange\",\n          onClick: playing ? stopRecording : startRecording,\n          children: [/*#__PURE__*/_jsxDEV(SlMicrophone, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 13\n          }, this), playing ? \"Stop\" : \"Start\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n_s(Translate, \"io46t7pj8xDLzsIL2fqyzxRs3z8=\");\n_c = Translate;\nvar _c;\n$RefreshReg$(_c, \"Translate\");","map":{"version":3,"names":["React","useState","useRef","useEffect","Link","SlMicrophone","pipeline","jsxDEV","_jsxDEV","Translate","_s","playing","setPlaying","mediaRecorder","audioChunks","setAudioChunks","audio","setAudio","mimeType","transcribedText","setTranscribedText","startRecording","audioUrl","transcribe","stopRecording","options","lang","result","transcribedResult","text","error","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","src","controls","to","onClick","_c","$RefreshReg$"],"sources":["/Users/phreetech13/Desktop/RealTimeAudioToText/src/components/Transcribe.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"../App.css\";\nimport { SlMicrophone } from \"react-icons/sl\";\nimport { pipeline } from '@xenova/transformers';\n\nexport default function Translate() {\n  const [playing, setPlaying] = useState(false);\n  const mediaRecorder = useRef(null);\n  const [audioChunks, setAudioChunks] = useState([]);\n  const [audio, setAudio] = useState(null);\n  const mimeType = \"audio/webm\";\n  const [transcribedText, setTranscribedText] = useState(\"\");\n\n  const startRecording = async () => {\n    const audioUrl = 'https://huggingface.co/datasets/Narsil/asr_dummy/resolve/main/mlk.flac';\n    setPlaying(true);\n    setAudio(audioUrl);\n    transcribe(audioUrl);\n  };\n\n  const stopRecording = () => {\n    setPlaying(false);\n    setAudio(null);\n    setTranscribedText(\"\");\n  };\n\n  const transcribe = async (audioUrl) => {\n    try {\n      const options = {\n        lang: \"english\",\n        // Add any additional options required by the transformer tool\n      };\n\n      const result = await pipeline('automatic-speech-recognition', 'Xenova/whisper-small.en')(audioUrl, options);\n      const transcribedResult = { text: result.text };\n      setTranscribedText(transcribedResult.text);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <div className=\"translate-audio\">\n      <div className=\"translate-overlay\">\n        <div className=\"translated-words\">\n          {/* Display the transcribed text here */}\n          <p>{transcribedText}</p>\n        </div>\n        {audio && <audio src={audio} controls />}\n        <div className=\"logic-buttons\">\n          <Link to=\"/\">\n            <button className=\"logic-btn-orange back-btn\">back</button>\n          </Link>\n          <button\n            className=\"logic-btn-orange\"\n            onClick={playing ? stopRecording : startRecording}\n          >\n            <SlMicrophone />\n            {playing ? \"Stop\" : \"Start\"}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}