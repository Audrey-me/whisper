{"ast":null,"code":"var _jsxFileName = \"/Users/phreetech13/Desktop/RealTimeAudioToText/src/components/Translate.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"../App.css\";\nimport { SlMicrophone } from \"react-icons/sl\";\nimport { pipeline } from '@xenova/transformers';\nimport { async } from \"q\";\n\n// Allocate a pipeline for Automatic Speech Recognition\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet transcriber = await pipeline('automatic-speech-recognition', 'Xenova/whisper-small.en');\n\n// Transcribe an audio file, loaded from a URL.\n// {text: ' I have a dream that one day this nation will rise up and live out the true meaning of its creed.'}\n// [{'label': 'POSITIVE', 'score': 0.9998}]\n\n// import { API } from \"aws-amplify\";\n\nexport default function Translate() {\n  _s();\n  const [playing, setPlaying] = useState(false);\n  const mediaRecorder = useRef(null);\n  const [audioChunks, setAudioChunks] = useState([]);\n  const [audio, setAudio] = useState(null);\n  const mimeType = \"audio/webm\";\n  const apiName = \"realtimeaudiototextapi\";\n  const path = \"/transcribe\";\n  const transcribe = url => {\n    const myInit = {\n      headers: {},\n      response: true,\n      body: {\n        fileUrl: url,\n        lang: \"english\"\n      }\n    };\n    // API.post(apiName, path, myInit)\n    //   .then((response) => {\n    //     console.log(response);\n    //   })\n    //   .catch((error) => {\n    //     console.log(error.response);\n    //   });\n  };\n\n  const getMicrophonePermission = async () => {\n    if (\"MediaRecorder\" in window) {\n      try {\n        const streamData = await navigator.mediaDevices.getUserMedia({\n          audio: true\n        });\n        return new Promise((resolve, reject) => {\n          resolve(streamData);\n        });\n      } catch (err) {\n        alert(err.message);\n      }\n    } else {\n      alert(\"The MediaRecorder API is not supported in your browser.\");\n    }\n  };\n  const startRecording = async () => {\n    let stream = await getMicrophonePermission();\n    setPlaying(true);\n    //create new Media recorder instance using the stream\n    const media = new MediaRecorder(stream, {\n      type: mimeType\n    });\n    //set the MediaRecorder instance to the mediaRecorder ref\n    mediaRecorder.current = media;\n    //invokes the start method to start the recording process\n    mediaRecorder.current.start(5000);\n    let localAudioChunks = [];\n    mediaRecorder.current.ondataavailable = event => {\n      if (typeof event.data === \"undefined\") return;\n      if (event.data.size === 0) return;\n      localAudioChunks.push(event.data);\n      setAudioChunks([event.data]);\n    };\n    setAudioChunks(localAudioChunks);\n  };\n  const stopRecording = () => {\n    setPlaying(false);\n    //stops the recording instance\n    mediaRecorder.current.stop();\n    mediaRecorder.current.onstop = () => {\n      //creates a blob file from the audiochunks data\n      const audioBlob = new Blob(audioChunks, {\n        type: mimeType\n      });\n      //creates a playable URL from the blob file.\n      const audioUrl = URL.createObjectURL(audioBlob);\n      setAudio(audioUrl);\n      transcribe(audioUrl);\n      setAudioChunks([]);\n    };\n  };\n  const getResponse = async () => {\n    let result = await transcriber(setAudio);\n    return result;\n  };\n  useEffect(() => {\n    if (audioChunks.length > 0) {\n      //creates a blob file from the audiochunks data\n      const audioBlob = new Blob(audioChunks, {\n        type: mimeType\n      });\n      //creates a playable URL from the blob file.\n      const audioUrl = URL.createObjectURL(audioBlob);\n      setAudio(audioUrl);\n      setAudioChunks([]);\n    }\n  }, [audioChunks]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"translate-audio\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"translate-overlay\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"traslated-words\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: getResponse\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), audio ? /*#__PURE__*/_jsxDEV(\"audio\", {\n        src: audio,\n        controls: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 18\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logic-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(Link, {\n          to: \"/\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"logic-btn-orange back-btn\",\n            children: \"back\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"logic-btn-orange\",\n          onClick: playing ? stopRecording : startRecording,\n          children: [/*#__PURE__*/_jsxDEV(SlMicrophone, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 13\n          }, this), playing ? \"Stop\" : \"Start\", \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n}\n_s(Translate, \"FjFXlondaUXkVDca9+2KEiO4CJ0=\");\n_c = Translate;\nvar _c;\n$RefreshReg$(_c, \"Translate\");","map":{"version":3,"names":["React","useState","useRef","useEffect","Link","SlMicrophone","pipeline","async","jsxDEV","_jsxDEV","transcriber","Translate","_s","playing","setPlaying","mediaRecorder","audioChunks","setAudioChunks","audio","setAudio","mimeType","apiName","path","transcribe","url","myInit","headers","response","body","fileUrl","lang","getMicrophonePermission","window","streamData","navigator","mediaDevices","getUserMedia","Promise","resolve","reject","err","alert","message","startRecording","stream","media","MediaRecorder","type","current","start","localAudioChunks","ondataavailable","event","data","size","push","stopRecording","stop","onstop","audioBlob","Blob","audioUrl","URL","createObjectURL","getResponse","result","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","src","controls","to","onClick","_c","$RefreshReg$"],"sources":["/Users/phreetech13/Desktop/RealTimeAudioToText/src/components/Translate.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"../App.css\";\nimport { SlMicrophone } from \"react-icons/sl\";\nimport { pipeline } from '@xenova/transformers';\nimport { async } from \"q\";\n\n// Allocate a pipeline for Automatic Speech Recognition\nlet transcriber = await pipeline('automatic-speech-recognition', 'Xenova/whisper-small.en');\n\n// Transcribe an audio file, loaded from a URL.\n// {text: ' I have a dream that one day this nation will rise up and live out the true meaning of its creed.'}\n// [{'label': 'POSITIVE', 'score': 0.9998}]\n\n// import { API } from \"aws-amplify\";\n\nexport default function Translate() {\n  const [playing, setPlaying] = useState(false);\n  const mediaRecorder = useRef(null);\n  const [audioChunks, setAudioChunks] = useState([]);\n  const [audio, setAudio] = useState(null);\n  const mimeType = \"audio/webm\";\n\n  const apiName = \"realtimeaudiototextapi\";\n  const path = \"/transcribe\";\n\n  const transcribe = (url) => {\n    const myInit = {\n      headers: {},\n      response: true,\n      body: {\n        fileUrl: url,\n        lang: \"english\"\n      },\n    };\n    // API.post(apiName, path, myInit)\n    //   .then((response) => {\n    //     console.log(response);\n    //   })\n    //   .catch((error) => {\n    //     console.log(error.response);\n    //   });\n  };\n\n  const getMicrophonePermission = async () => {\n    if (\"MediaRecorder\" in window) {\n      try {\n        const streamData = await navigator.mediaDevices.getUserMedia({\n          audio: true,\n        });\n        return new Promise((resolve, reject) => {\n          resolve(streamData);\n        });\n      } catch (err) {\n        alert(err.message);\n      }\n    } else {\n      alert(\"The MediaRecorder API is not supported in your browser.\");\n    }\n  };\n  const startRecording = async () => {\n    let stream = await getMicrophonePermission();\n    setPlaying(true);\n    //create new Media recorder instance using the stream\n    const media = new MediaRecorder(stream, { type: mimeType });\n    //set the MediaRecorder instance to the mediaRecorder ref\n    mediaRecorder.current = media;\n    //invokes the start method to start the recording process\n    mediaRecorder.current.start(5000);\n    let localAudioChunks = [];\n    mediaRecorder.current.ondataavailable = (event) => {\n      if (typeof event.data === \"undefined\") return;\n      if (event.data.size === 0) return;\n      localAudioChunks.push(event.data);\n      setAudioChunks([event.data]);\n    };\n     setAudioChunks(localAudioChunks);\n  };\n\n  const stopRecording = () => {\n    setPlaying(false);\n    //stops the recording instance\n    mediaRecorder.current.stop();\n    mediaRecorder.current.onstop = () => {\n      //creates a blob file from the audiochunks data\n      const audioBlob = new Blob(audioChunks, { type: mimeType });\n      //creates a playable URL from the blob file.\n      const audioUrl = URL.createObjectURL(audioBlob);\n      setAudio(audioUrl);\n      transcribe(audioUrl);\n      setAudioChunks([]);\n\n    };\n  };\n\n  const getResponse = async () => {\n    let result = await transcriber(setAudio);\n    return result\n  }\n\n  useEffect(() => {\n    if (audioChunks.length > 0) {\n      //creates a blob file from the audiochunks data\n      const audioBlob = new Blob(audioChunks, { type: mimeType });\n      //creates a playable URL from the blob file.\n      const audioUrl = URL.createObjectURL(audioBlob);\n      setAudio(audioUrl);\n      setAudioChunks([]);\n    }\n  }, [audioChunks]);\n\n  return (\n    <div className=\"translate-audio\">\n      <div className=\"translate-overlay\">\n        <div className=\"traslated-words\">\n          <p>{getResponse}</p>\n        </div>\n        {audio ? <audio src={audio} controls></audio> : null}\n        <div className=\"logic-buttons\">\n          <Link to=\"/\">\n            <button className=\"logic-btn-orange back-btn\">back</button>\n          </Link>\n          <button\n            className=\"logic-btn-orange\"\n            onClick={playing ? stopRecording : startRecording}\n          >\n            <SlMicrophone />\n            {playing ? \"Stop\" : \"Start\"}{\" \"}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}