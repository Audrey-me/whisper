{"ast":null,"code":"var _jsxFileName = \"/Users/phreetech13/Desktop/RealTimeAudioToText/frontend/src/components/Transcribe.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"../App.css\";\nimport { SlMicrophone } from \"react-icons/sl\";\n// import { API } from \"aws-amplify\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Transcribe(props) {\n  _s();\n  const [playing, setPlaying] = useState(false);\n  const mediaRecorder = useRef(null);\n  const [audioChunks, setAudioChunks] = useState([]);\n  const [audio, setAudio] = useState(null);\n  const mimeType = \"audio/webm\";\n  const {\n    message\n  } = props.message;\n  const [transcription, setTranscription] = useState(\"\");\n  const apiName = \"realtimeaudiototextapi\";\n  const path = \"/transcribe\";\n  const transcribe = async url => {\n    try {\n      const response = await fetch(\"http://localhost:8000/transcribe\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          audioUrl: url\n        })\n      });\n      const data = await response.json();\n      setTranscription(data.text);\n    } catch (error) {\n      console.error(error);\n      setTranscription(\"An error occurred during transcription.\");\n    }\n  };\n  const getMicrophonePermission = async () => {\n    if (\"MediaRecorder\" in window) {\n      try {\n        const streamData = await navigator.mediaDevices.getUserMedia({\n          audio: true\n        });\n        return new Promise((resolve, reject) => {\n          resolve(streamData);\n        });\n      } catch (err) {\n        alert(err.message);\n      }\n    } else {\n      alert(\"The MediaRecorder API is not supported in your browser.\");\n    }\n  };\n  const startRecording = async () => {\n    let stream = await getMicrophonePermission();\n    setPlaying(true);\n\n    //create new Media recorder instance using the stream\n    const media = new MediaRecorder(stream, {\n      type: mimeType\n    });\n    //set the MediaRecorder instance to the mediaRecorder ref\n    mediaRecorder.current = media;\n    //invokes the start method to start the recording process\n    mediaRecorder.current.start(5000);\n    let localAudioChunks = [];\n    mediaRecorder.current.ondataavailable = event => {\n      if (typeof event.data === \"undefined\") return;\n      if (event.data.size === 0) return;\n      localAudioChunks.push(event.data);\n      setAudioChunks([event.data]);\n    };\n    setAudioChunks(localAudioChunks);\n  };\n  const stopRecording = () => {\n    setPlaying(false);\n    //stops the recording instance\n    mediaRecorder.current.stop();\n    mediaRecorder.current.onstop = () => {\n      //creates a blob file from the audiochunks data\n      const audioBlob = new Blob(audioChunks, {\n        type: mimeType\n      });\n      //creates a playable URL from the blob file.\n      const audioUrl = URL.createObjectURL(audioBlob);\n      setAudio(audioUrl);\n      transcribe(audioUrl);\n      setAudioChunks([]);\n    };\n  };\n  useEffect(() => {\n    if (audioChunks.length > 0) {\n      //creates a blob file from the audiochunks data\n      const audioBlob = new Blob(audioChunks, {\n        type: mimeType\n      });\n      //creates a playable URL from the blob file.\n      const audioUrl = URL.createObjectURL(audioBlob);\n      setAudio(audioUrl);\n      setAudioChunks([]);\n    }\n  }, [audioChunks]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"translate-audio\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"translate-overlay\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"traslated-words\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"hello word, this is the translated words\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this), transcription && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"transcription-result\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: transcription\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 5\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 3\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), audio ? /*#__PURE__*/_jsxDEV(\"audio\", {\n        src: audio,\n        controls: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 18\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logic-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(Link, {\n          to: \"/\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"logic-btn-orange back-btn\",\n            children: \"back\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"logic-btn-orange\",\n          onClick: playing ? stopRecording : startRecording,\n          children: [/*#__PURE__*/_jsxDEV(SlMicrophone, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 13\n          }, this), playing ? \"Stop\" : \"Start\", \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleTranscribe,\n          children: \"Transcribe Audio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n}\n_s(Transcribe, \"PvRz9XS1KYNpUIZkWFlzOtR9ooc=\");\n_c = Transcribe;\nvar _c;\n$RefreshReg$(_c, \"Transcribe\");","map":{"version":3,"names":["React","useState","useRef","useEffect","Link","SlMicrophone","jsxDEV","_jsxDEV","Transcribe","props","_s","playing","setPlaying","mediaRecorder","audioChunks","setAudioChunks","audio","setAudio","mimeType","message","transcription","setTranscription","apiName","path","transcribe","url","response","fetch","method","headers","body","JSON","stringify","audioUrl","data","json","text","error","console","getMicrophonePermission","window","streamData","navigator","mediaDevices","getUserMedia","Promise","resolve","reject","err","alert","startRecording","stream","media","MediaRecorder","type","current","start","localAudioChunks","ondataavailable","event","size","push","stopRecording","stop","onstop","audioBlob","Blob","URL","createObjectURL","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","src","controls","to","onClick","handleTranscribe","_c","$RefreshReg$"],"sources":["/Users/phreetech13/Desktop/RealTimeAudioToText/frontend/src/components/Transcribe.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"../App.css\";\nimport { SlMicrophone } from \"react-icons/sl\";\n// import { API } from \"aws-amplify\";\n\nexport default function Transcribe(props) {\n  const [playing, setPlaying] = useState(false);\n  const mediaRecorder = useRef(null);\n  const [audioChunks, setAudioChunks] = useState([]);\n  const [audio, setAudio] = useState(null);\n  const mimeType = \"audio/webm\";\n  const {message} = props.message;\n  const [transcription, setTranscription] = useState(\"\");\n  const apiName = \"realtimeaudiototextapi\";\n  const path = \"/transcribe\";\n\n  const transcribe = async (url) => {\n    try {\n      const response = await fetch(\"http://localhost:8000/transcribe\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ audioUrl: url }),\n      });\n      const data = await response.json();\n      setTranscription(data.text);\n    } catch (error) {\n      console.error(error);\n      setTranscription(\"An error occurred during transcription.\");\n    }\n  };\n\n  \n  const getMicrophonePermission = async () => {\n    if (\"MediaRecorder\" in window) {\n      try {\n        const streamData = await navigator.mediaDevices.getUserMedia({\n          audio: true,\n        });\n        return new Promise((resolve, reject) => {\n          resolve(streamData);\n        });\n      } catch (err) {\n        alert(err.message);\n      }\n    } else {\n      alert(\"The MediaRecorder API is not supported in your browser.\");\n    }\n  };\n\n  const startRecording = async () => {\n    let stream = await getMicrophonePermission();\n    setPlaying(true);\n    \n    //create new Media recorder instance using the stream\n    const media = new MediaRecorder(stream, { type: mimeType });\n    //set the MediaRecorder instance to the mediaRecorder ref\n    mediaRecorder.current = media;\n    //invokes the start method to start the recording process\n    mediaRecorder.current.start(5000);\n    let localAudioChunks = [];\n    mediaRecorder.current.ondataavailable = (event) => {\n      if (typeof event.data === \"undefined\") return;\n      if (event.data.size === 0) return;\n      localAudioChunks.push(event.data);\n      setAudioChunks([event.data]);\n    };\n     setAudioChunks(localAudioChunks);\n  };\n\n  const stopRecording = () => {\n    setPlaying(false);\n    //stops the recording instance\n    mediaRecorder.current.stop();\n    \n    mediaRecorder.current.onstop = () => {\n      //creates a blob file from the audiochunks data\n      const audioBlob = new Blob(audioChunks, { type: mimeType });\n      //creates a playable URL from the blob file.\n      const audioUrl = URL.createObjectURL(audioBlob);\n      setAudio(audioUrl);\n      transcribe(audioUrl);\n      setAudioChunks([]);\n    };\n  };\n\n  useEffect(() => {\n    if (audioChunks.length > 0) {\n      //creates a blob file from the audiochunks data\n      const audioBlob = new Blob(audioChunks, { type: mimeType });\n      //creates a playable URL from the blob file.\n      const audioUrl = URL.createObjectURL(audioBlob);\n      setAudio(audioUrl);\n      setAudioChunks([]);\n    }\n  }, [audioChunks]);\n\n  return (\n    <div className=\"translate-audio\">\n      <div className=\"translate-overlay\">\n        <div className=\"traslated-words\">\n          <p>hello word, this is the translated words</p>\n          {transcription && (\n  <div className=\"transcription-result\">\n    <p>{transcription}</p>\n  </div>\n)}\n        </div>\n        {audio ? <audio src={audio} controls></audio> : null}\n        <div className=\"logic-buttons\">\n          <Link to=\"/\">\n            <button className=\"logic-btn-orange back-btn\">back</button>\n          </Link>\n          <button\n            className=\"logic-btn-orange\"\n            onClick={playing ? stopRecording : startRecording}\n          >\n            <SlMicrophone />\n            {playing ? \"Stop\" : \"Start\"}{\" \"}\n          </button>\n          <button onClick={handleTranscribe}>Transcribe Audio</button>\n\n          \n        </div>\n      </div>\n    </div>\n  );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}