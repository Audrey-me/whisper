{"ast":null,"code":"/**\n * @file Core utility functions/classes for Transformers.js.\n * \n * These are only used internally, meaning an end-user shouldn't\n * need to access anything here.\n * \n * @module utils/core\n */\n\n/**\n * Helper function to dispatch progress callbacks.\n *\n * @param {function} progress_callback The progress callback function to dispatch.\n * @param {any} data The data to pass to the progress callback function.\n * @returns {void}\n * @private\n */\nexport function dispatchCallback(progress_callback, data) {\n  if (progress_callback !== null) progress_callback(data);\n}\n\n/**\n * Reverses the keys and values of an object.\n *\n * @param {Object} data The object to reverse.\n * @returns {Object} The reversed object.\n * @see https://ultimatecourses.com/blog/reverse-object-keys-and-values-in-javascript\n */\nexport function reverseDictionary(data) {\n  // https://ultimatecourses.com/blog/reverse-object-keys-and-values-in-javascript\n  return Object.fromEntries(Object.entries(data).map(_ref => {\n    let [key, value] = _ref;\n    return [value, key];\n  }));\n}\n\n/**\n * Escapes regular expression special characters from a string by replacing them with their escaped counterparts.\n *\n * @param {string} string The string to escape.\n * @returns {string} The escaped string.\n */\nexport function escapeRegExp(string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\n\n/**\n * A base class for creating callable objects.\n * \n * @type {new () => {(...args: any[]): any, _call(...args: any[]): any}}\n */\nexport const Callable = /** @type {any} */class {\n  /**\n  * Creates a new instance of the Callable class.\n  */\n  constructor() {\n    /**\n     * Creates a closure that delegates to a private method '_call' with the given arguments.\n     * @type {any}\n     * @param {...any} args Zero or more arguments to pass to the '_call' method.\n     * @returns {*} The result of calling the '_call' method.\n     */\n    let closure = function () {\n      return closure._call(...arguments);\n    };\n    return Object.setPrototypeOf(closure, new.target.prototype);\n  }\n\n  /**\n   * This method should be implemented in subclasses to provide the\n   * functionality of the callable object.\n   *\n   * @param {any[]} args\n   * @throws {Error} If the subclass does not implement the `_call` method.\n   */\n  _call() {\n    throw Error('Must implement _call method in subclass');\n  }\n};\n\n/**\n * Check if a value is a string.\n * @param {*} text The value to check.\n * @returns {boolean} True if the value is a string, false otherwise.\n */\nexport function isString(text) {\n  return typeof text === 'string' || text instanceof String;\n}\n\n/**\n * Check if a value is a typed array.\n * @param {*} val The value to check.\n * @returns {boolean} True if the value is a `TypedArray`, false otherwise.\n * \n * Adapted from https://stackoverflow.com/a/71091338/13989043\n */\nexport function isTypedArray(val) {\n  return val?.prototype?.__proto__?.constructor?.name === 'TypedArray';\n}\n\n/**\n * Check if a value is an integer.\n * @param {*} x The value to check.\n * @returns {boolean} True if the value is a string, false otherwise.\n */\nexport function isIntegralNumber(x) {\n  return Number.isInteger(x) || typeof x === 'bigint';\n}\n\n/**\n * Check if a value is exists.\n * @param {*} x The value to check.\n * @returns {boolean} True if the value exists, false otherwise.\n */\nexport function exists(x) {\n  return x !== undefined && x !== null;\n}\n\n/**\n * Calculates the dimensions of a nested array.\n *\n * @param {Array} arr The nested array to calculate dimensions for.\n * @returns {Array} An array containing the dimensions of the input array.\n */\nexport function calculateDimensions(arr) {\n  const dimensions = [];\n  let current = arr;\n  while (Array.isArray(current)) {\n    dimensions.push(current.length);\n    current = current[0];\n  }\n  return dimensions;\n}\n\n/**\n * Replicate python's .pop() method for objects.\n * @param {Object} obj The object to pop from.\n * @param {string} key The key to pop.\n * @param {*} defaultValue The default value to return if the key does not exist.\n * @returns {*} The value of the popped key.\n * @throws {Error} If the key does not exist and no default value is provided.\n */\nexport function pop(obj, key) {\n  let defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n  const value = obj[key];\n  if (value !== undefined) {\n    delete obj[key];\n    return value;\n  }\n  if (defaultValue === undefined) {\n    throw Error(`Key ${key} does not exist in object.`);\n  }\n  return defaultValue;\n}\n\n/**\n * Efficiently merge arrays, creating a new copy.\n * Adapted from https://stackoverflow.com/a/6768642/13989043\n * @param  {...any} arrs Arrays to merge.\n * @returns The merged array.\n */\nexport function mergeArrays() {\n  for (var _len = arguments.length, arrs = new Array(_len), _key = 0; _key < _len; _key++) {\n    arrs[_key] = arguments[_key];\n  }\n  return Array.prototype.concat.apply([], arrs);\n}","map":{"version":3,"names":["dispatchCallback","progress_callback","data","reverseDictionary","Object","fromEntries","entries","map","_ref","key","value","escapeRegExp","string","replace","Callable","constructor","closure","_call","arguments","setPrototypeOf","new","target","prototype","Error","isString","text","String","isTypedArray","val","__proto__","name","isIntegralNumber","x","Number","isInteger","exists","undefined","calculateDimensions","arr","dimensions","current","Array","isArray","push","length","pop","obj","defaultValue","mergeArrays","_len","arrs","_key","concat","apply"],"sources":["/Users/phreetech13/Desktop/RealTimeAudioToText/node_modules/@xenova/transformers/src/utils/core.js"],"sourcesContent":["\n/**\n * @file Core utility functions/classes for Transformers.js.\n * \n * These are only used internally, meaning an end-user shouldn't\n * need to access anything here.\n * \n * @module utils/core\n */\n\n/**\n * Helper function to dispatch progress callbacks.\n *\n * @param {function} progress_callback The progress callback function to dispatch.\n * @param {any} data The data to pass to the progress callback function.\n * @returns {void}\n * @private\n */\nexport function dispatchCallback(progress_callback, data) {\n    if (progress_callback !== null) progress_callback(data);\n}\n\n/**\n * Reverses the keys and values of an object.\n *\n * @param {Object} data The object to reverse.\n * @returns {Object} The reversed object.\n * @see https://ultimatecourses.com/blog/reverse-object-keys-and-values-in-javascript\n */\nexport function reverseDictionary(data) {\n    // https://ultimatecourses.com/blog/reverse-object-keys-and-values-in-javascript\n    return Object.fromEntries(Object.entries(data).map(([key, value]) => [value, key]));\n}\n\n/**\n * Escapes regular expression special characters from a string by replacing them with their escaped counterparts.\n *\n * @param {string} string The string to escape.\n * @returns {string} The escaped string.\n */\nexport function escapeRegExp(string) {\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\n\n/**\n * A base class for creating callable objects.\n * \n * @type {new () => {(...args: any[]): any, _call(...args: any[]): any}}\n */\nexport const Callable = /** @type {any} */ (class {\n    /**\n    * Creates a new instance of the Callable class.\n    */\n    constructor() {\n        /**\n         * Creates a closure that delegates to a private method '_call' with the given arguments.\n         * @type {any}\n         * @param {...any} args Zero or more arguments to pass to the '_call' method.\n         * @returns {*} The result of calling the '_call' method.\n         */\n        let closure = function (...args) {\n            return closure._call(...args)\n        }\n        return Object.setPrototypeOf(closure, new.target.prototype)\n    }\n\n    /**\n     * This method should be implemented in subclasses to provide the\n     * functionality of the callable object.\n     *\n     * @param {any[]} args\n     * @throws {Error} If the subclass does not implement the `_call` method.\n     */\n    _call(...args) {\n        throw Error('Must implement _call method in subclass')\n    }\n});\n\n\n/**\n * Check if a value is a string.\n * @param {*} text The value to check.\n * @returns {boolean} True if the value is a string, false otherwise.\n */\nexport function isString(text) {\n    return typeof text === 'string' || text instanceof String\n}\n\n\n/**\n * Check if a value is a typed array.\n * @param {*} val The value to check.\n * @returns {boolean} True if the value is a `TypedArray`, false otherwise.\n * \n * Adapted from https://stackoverflow.com/a/71091338/13989043\n */\nexport function isTypedArray(val) {\n    return val?.prototype?.__proto__?.constructor?.name === 'TypedArray';\n}\n\n\n/**\n * Check if a value is an integer.\n * @param {*} x The value to check.\n * @returns {boolean} True if the value is a string, false otherwise.\n */\nexport function isIntegralNumber(x) {\n    return Number.isInteger(x) || typeof x === 'bigint'\n}\n\n/**\n * Check if a value is exists.\n * @param {*} x The value to check.\n * @returns {boolean} True if the value exists, false otherwise.\n */\nexport function exists(x) {\n    return x !== undefined && x !== null;\n}\n\n/**\n * Calculates the dimensions of a nested array.\n *\n * @param {Array} arr The nested array to calculate dimensions for.\n * @returns {Array} An array containing the dimensions of the input array.\n */\nexport function calculateDimensions(arr) {\n    const dimensions = [];\n    let current = arr;\n    while (Array.isArray(current)) {\n        dimensions.push(current.length);\n        current = current[0];\n    }\n    return dimensions;\n}\n\n/**\n * Replicate python's .pop() method for objects.\n * @param {Object} obj The object to pop from.\n * @param {string} key The key to pop.\n * @param {*} defaultValue The default value to return if the key does not exist.\n * @returns {*} The value of the popped key.\n * @throws {Error} If the key does not exist and no default value is provided.\n */\nexport function pop(obj, key, defaultValue = undefined) {\n    const value = obj[key];\n    if (value !== undefined) {\n        delete obj[key];\n        return value;\n    }\n    if (defaultValue === undefined) {\n        throw Error(`Key ${key} does not exist in object.`)\n    }\n    return defaultValue;\n}\n\n/**\n * Efficiently merge arrays, creating a new copy.\n * Adapted from https://stackoverflow.com/a/6768642/13989043\n * @param  {...any} arrs Arrays to merge.\n * @returns The merged array.\n */\nexport function mergeArrays(...arrs) {\n    return Array.prototype.concat.apply([], arrs);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}