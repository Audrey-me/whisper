{"ast":null,"code":"var _jsxFileName = \"/Users/phreetech13/Desktop/RealTimeAudioToText/src/components/Transcribe.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"../App.css\";\nimport { SlMicrophone } from \"react-icons/sl\";\nimport { SpeechToText } from \"@huggingface/speech-to-text\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Translate() {\n  _s();\n  const [playing, setPlaying] = useState(false);\n  const mediaRecorder = useRef(null);\n  const [audioChunks, setAudioChunks] = useState([]);\n  const [audio, setAudio] = useState(null);\n  const mimeType = \"audio/webm\";\n  const [transcribedText, setTranscribedText] = useState(\"\");\n  const apiName = \"realtimeaudiototextapi\";\n  const path = \"/transcribe\";\n  const transcribe = async url => {\n    const myInit = {\n      headers: {},\n      response: true,\n      body: {\n        fileUrl: url,\n        lang: \"english\"\n      }\n    };\n    let transcriber = await AutomaticSpeechRecognitionPipeline.fromOptions({\n      model: 'Xenova/whisper-small.en',\n      tokenizer: 'Xenova/whisper-small.en'\n    });\n    let result = await transcriber(url);\n    setTranscribedText(result.text);\n  };\n  const getMicrophonePermission = async () => {\n    if (\"MediaRecorder\" in window) {\n      try {\n        const streamData = await navigator.mediaDevices.getUserMedia({\n          audio: true\n        });\n        return streamData;\n      } catch (err) {\n        alert(err.message);\n      }\n    } else {\n      alert(\"The MediaRecorder API is not supported in your browser.\");\n    }\n  };\n  const startRecording = async () => {\n    const stream = await getMicrophonePermission();\n    setPlaying(true);\n    const media = new MediaRecorder(stream, {\n      type: mimeType\n    });\n    mediaRecorder.current = media;\n    const localAudioChunks = [];\n    mediaRecorder.current.ondataavailable = event => {\n      if (typeof event.data === \"undefined\") return;\n      if (event.data.size === 0) return;\n      localAudioChunks.push(event.data);\n      setAudioChunks(localAudioChunks);\n    };\n    mediaRecorder.current.start(5000);\n  };\n  const stopRecording = () => {\n    setPlaying(false);\n    mediaRecorder.current.stop();\n    mediaRecorder.current.onstop = () => {\n      const audioBlob = new Blob(audioChunks, {\n        type: mimeType\n      });\n      const audioUrl = URL.createObjectURL(audioBlob);\n      setAudio(audioUrl);\n      transcribe(audioUrl);\n      setAudioChunks([]);\n    };\n  };\n  useEffect(() => {\n    if (audioChunks.length > 0) {\n      const audioBlob = new Blob(audioChunks, {\n        type: mimeType\n      });\n      const audioUrl = URL.createObjectURL(audioBlob);\n      setAudio(audioUrl);\n    }\n  }, [audioChunks]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"translate-audio\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"translate-overlay\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"translated-words\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: transcribedText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), audio && /*#__PURE__*/_jsxDEV(\"audio\", {\n        src: audio,\n        controls: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logic-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(Link, {\n          to: \"/\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"logic-btn-orange back-btn\",\n            children: \"back\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"logic-btn-orange\",\n          onClick: playing ? stopRecording : startRecording,\n          children: [/*#__PURE__*/_jsxDEV(SlMicrophone, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 13\n          }, this), playing ? \"Stop\" : \"Start\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n}\n_s(Translate, \"6lv8q4CnFJzjALML16kDCo2lX+o=\");\n_c = Translate;\nvar _c;\n$RefreshReg$(_c, \"Translate\");","map":{"version":3,"names":["React","useState","useRef","useEffect","Link","SlMicrophone","SpeechToText","jsxDEV","_jsxDEV","Translate","_s","playing","setPlaying","mediaRecorder","audioChunks","setAudioChunks","audio","setAudio","mimeType","transcribedText","setTranscribedText","apiName","path","transcribe","url","myInit","headers","response","body","fileUrl","lang","transcriber","AutomaticSpeechRecognitionPipeline","fromOptions","model","tokenizer","result","text","getMicrophonePermission","window","streamData","navigator","mediaDevices","getUserMedia","err","alert","message","startRecording","stream","media","MediaRecorder","type","current","localAudioChunks","ondataavailable","event","data","size","push","start","stopRecording","stop","onstop","audioBlob","Blob","audioUrl","URL","createObjectURL","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","src","controls","to","onClick","_c","$RefreshReg$"],"sources":["/Users/phreetech13/Desktop/RealTimeAudioToText/src/components/Transcribe.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"../App.css\";\nimport { SlMicrophone } from \"react-icons/sl\";\nimport { SpeechToText } from \"@huggingface/speech-to-text\";\n\n\n\nexport default function Translate() {\n  const [playing, setPlaying] = useState(false);\n  const mediaRecorder = useRef(null);\n  const [audioChunks, setAudioChunks] = useState([]);\n  const [audio, setAudio] = useState(null);\n  const mimeType = \"audio/webm\";\n  const [transcribedText, setTranscribedText] = useState(\"\"); \n\n  const apiName = \"realtimeaudiototextapi\";\n  const path = \"/transcribe\";\n\n  const transcribe = async (url) => {\n    const myInit = {\n      headers: {},\n      response: true,\n      body: {\n        fileUrl: url,\n        lang: \"english\"\n      },\n    };\n\n    let transcriber = await AutomaticSpeechRecognitionPipeline.fromOptions({\n      model: 'Xenova/whisper-small.en',\n      tokenizer: 'Xenova/whisper-small.en',\n    });\n    \n    let result = await transcriber(url);\n    setTranscribedText(result.text);\n  };\n\n  const getMicrophonePermission = async () => {\n    if (\"MediaRecorder\" in window) {\n      try {\n        const streamData = await navigator.mediaDevices.getUserMedia({\n          audio: true,\n        });\n        return streamData;\n      } catch (err) {\n        alert(err.message);\n      }\n    } else {\n      alert(\"The MediaRecorder API is not supported in your browser.\");\n    }\n  };\n\n  const startRecording = async () => {\n    const stream = await getMicrophonePermission();\n    setPlaying(true);\n    const media = new MediaRecorder(stream, { type: mimeType });\n    mediaRecorder.current = media;\n    const localAudioChunks = [];\n    mediaRecorder.current.ondataavailable = (event) => {\n      if (typeof event.data === \"undefined\") return;\n      if (event.data.size === 0) return;\n      localAudioChunks.push(event.data);\n      setAudioChunks(localAudioChunks);\n    };\n    mediaRecorder.current.start(5000);\n  };\n\n  const stopRecording = () => {\n    setPlaying(false);\n    mediaRecorder.current.stop();\n    mediaRecorder.current.onstop = () => {\n      const audioBlob = new Blob(audioChunks, { type: mimeType });\n      const audioUrl = URL.createObjectURL(audioBlob);\n      setAudio(audioUrl);\n      transcribe(audioUrl);\n      setAudioChunks([]);\n    };\n  };\n\n  useEffect(() => {\n    if (audioChunks.length > 0) {\n      const audioBlob = new Blob(audioChunks, { type: mimeType });\n      const audioUrl = URL.createObjectURL(audioBlob);\n      setAudio(audioUrl);\n    }\n  }, [audioChunks]);\n\n  return (\n    <div className=\"translate-audio\">\n      <div className=\"translate-overlay\">\n        <div className=\"translated-words\">\n          {/* TODO: Display the transcribed text here */}\n          <p>{transcribedText}</p>\n        </div>\n        {audio && <audio src={audio} controls />}\n        <div className=\"logic-buttons\">\n          <Link to=\"/\">\n            <button className=\"logic-btn-orange back-btn\">back</button>\n          </Link>\n          <button\n            className=\"logic-btn-orange\"\n            onClick={playing ? stopRecording : startRecording}\n          >\n            <SlMicrophone />\n            {playing ? \"Stop\" : \"Start\"}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}