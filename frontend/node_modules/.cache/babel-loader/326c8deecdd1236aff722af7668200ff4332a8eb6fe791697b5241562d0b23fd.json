{"ast":null,"code":"var _jsxFileName = \"/Users/phreetech13/Desktop/RealTimeAudioToText/frontend/src/components/Transcribe.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"../App.css\";\nimport { SlMicrophone } from \"react-icons/sl\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Transcribe(props) {\n  _s();\n  const [recording, setRecording] = useState(false);\n  const mediaRecorder = useRef(null);\n  const [audioChunks, setAudioChunks] = useState([]);\n  const mimeType = \"audio/webm\";\n  const {\n    message\n  } = props.message;\n  const [transcription, setTranscription] = useState(\"\");\n  const transcribe = async audioData => {\n    try {\n      const formData = new FormData();\n      formData.append(\"audio\", audioData);\n      const response = await fetch(\"http://localhost:8000/transcribe\", {\n        method: \"POST\",\n        body: formData\n      });\n      const data = await response.json();\n      setTranscription(data.text);\n    } catch (error) {\n      console.error(error);\n      setTranscription(\"An error occurred during transcription.\");\n    }\n  };\n  const getMicrophonePermission = async () => {\n    if (\"MediaRecorder\" in window) {\n      try {\n        const streamData = await navigator.mediaDevices.getUserMedia({\n          audio: true\n        });\n        return new Promise((resolve, reject) => {\n          resolve(streamData);\n        });\n      } catch (err) {\n        alert(err.message);\n      }\n    } else {\n      alert(\"The MediaRecorder API is not supported in your browser.\");\n    }\n  };\n  const startRecording = async () => {\n    let stream = await getMicrophonePermission();\n    setPlaying(true);\n    const media = new MediaRecorder(stream, {\n      type: mimeType\n    });\n    mediaRecorder.current = media;\n    mediaRecorder.current.start(5000);\n    let localAudioChunks = [];\n    mediaRecorder.current.ondataavailable = event => {\n      if (typeof event.data === \"undefined\") return;\n      if (event.data.size === 0) return;\n      localAudioChunks.push(event.data);\n      setAudioChunks(localAudioChunks);\n\n      // Pass the recorded audio to the transcribe function\n      transcribe(new Blob(localAudioChunks, {\n        type: mimeType\n      }));\n    };\n    setAudioChunks(localAudioChunks);\n  };\n\n  // const stopRecording = () => {\n  //   setRecording(false);\n  //   mediaRecorder.current.stop();\n\n  //   mediaRecorder.current.onstop = () => {\n  //     const audioBlob = new Blob(audioChunks, { type: mimeType });\n  //     transcribe(audioBlob);\n  //     setAudioChunks([]);\n  //   };\n  // };\n\n  useEffect(() => {\n    if (audioChunks.length > 0) {\n      const audioBlob = new Blob(audioChunks, {\n        type: mimeType\n      });\n      setAudioChunks([]);\n    }\n  }, [audioChunks]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"translate-audio\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"translate-overlay\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"translated-words\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"hello word, this is the translated words\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this), transcription && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"transcription-result\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: transcription\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logic-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(Link, {\n          to: \"/\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"logic-btn-orange back-btn\",\n            children: \"back\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"logic-btn-orange\",\n          onClick: recording ? stopRecording : startRecording,\n          children: [/*#__PURE__*/_jsxDEV(SlMicrophone, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 13\n          }, this), recording ? \"Stop\" : \"Start\", \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\n_s(Transcribe, \"t7dr/ba3rdilh6jIyqfPFbTL+5s=\");\n_c = Transcribe;\nvar _c;\n$RefreshReg$(_c, \"Transcribe\");","map":{"version":3,"names":["React","useState","useRef","useEffect","Link","SlMicrophone","jsxDEV","_jsxDEV","Transcribe","props","_s","recording","setRecording","mediaRecorder","audioChunks","setAudioChunks","mimeType","message","transcription","setTranscription","transcribe","audioData","formData","FormData","append","response","fetch","method","body","data","json","text","error","console","getMicrophonePermission","window","streamData","navigator","mediaDevices","getUserMedia","audio","Promise","resolve","reject","err","alert","startRecording","stream","setPlaying","media","MediaRecorder","type","current","start","localAudioChunks","ondataavailable","event","size","push","Blob","length","audioBlob","className","children","fileName","_jsxFileName","lineNumber","columnNumber","to","onClick","stopRecording","_c","$RefreshReg$"],"sources":["/Users/phreetech13/Desktop/RealTimeAudioToText/frontend/src/components/Transcribe.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"../App.css\";\nimport { SlMicrophone } from \"react-icons/sl\";\n\nexport default function Transcribe(props) {\n  const [recording, setRecording] = useState(false);\n  const mediaRecorder = useRef(null);\n  const [audioChunks, setAudioChunks] = useState([]);\n  const mimeType = \"audio/webm\";\n  const { message } = props.message;\n  const [transcription, setTranscription] = useState(\"\");\n\n  const transcribe = async (audioData) => {\n    try {\n      const formData = new FormData();\n      formData.append(\"audio\", audioData);\n  \n      const response = await fetch(\"http://localhost:8000/transcribe\", {\n        method: \"POST\",\n        body: formData,\n      });\n      const data = await response.json();\n      setTranscription(data.text);\n    } catch (error) {\n      console.error(error);\n      setTranscription(\"An error occurred during transcription.\");\n    }\n  };\n  \n\n  const getMicrophonePermission = async () => {\n    if (\"MediaRecorder\" in window) {\n      try {\n        const streamData = await navigator.mediaDevices.getUserMedia({\n          audio: true,\n        });\n        return new Promise((resolve, reject) => {\n          resolve(streamData);\n        });\n      } catch (err) {\n        alert(err.message);\n      }\n    } else {\n      alert(\"The MediaRecorder API is not supported in your browser.\");\n    }\n  };\n\n  const startRecording = async () => {\n    let stream = await getMicrophonePermission();\n    setPlaying(true);\n  \n    const media = new MediaRecorder(stream, { type: mimeType });\n    mediaRecorder.current = media;\n    mediaRecorder.current.start(5000);\n    let localAudioChunks = [];\n    mediaRecorder.current.ondataavailable = (event) => {\n      if (typeof event.data === \"undefined\") return;\n      if (event.data.size === 0) return;\n      localAudioChunks.push(event.data);\n      setAudioChunks(localAudioChunks);\n  \n      // Pass the recorded audio to the transcribe function\n      transcribe(new Blob(localAudioChunks, { type: mimeType }));\n    };\n    setAudioChunks(localAudioChunks);\n  };\n  \n  // const stopRecording = () => {\n  //   setRecording(false);\n  //   mediaRecorder.current.stop();\n\n  //   mediaRecorder.current.onstop = () => {\n  //     const audioBlob = new Blob(audioChunks, { type: mimeType });\n  //     transcribe(audioBlob);\n  //     setAudioChunks([]);\n  //   };\n  // };\n\n  useEffect(() => {\n    if (audioChunks.length > 0) {\n      const audioBlob = new Blob(audioChunks, { type: mimeType });\n      setAudioChunks([]);\n    }\n  }, [audioChunks]);\n\n  return (\n    <div className=\"translate-audio\">\n      <div className=\"translate-overlay\">\n        <div className=\"translated-words\">\n          <p>hello word, this is the translated words</p>\n          {transcription && (\n            <div className=\"transcription-result\">\n              <p>{transcription}</p>\n            </div>\n          )}\n        </div>\n        <div className=\"logic-buttons\">\n          <Link to=\"/\">\n            <button className=\"logic-btn-orange back-btn\">back</button>\n          </Link>\n          <button\n            className=\"logic-btn-orange\"\n            onClick={recording ? stopRecording : startRecording}\n          >\n            <SlMicrophone />\n            {recording ? \"Stop\" : \"Start\"}{\" \"}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}