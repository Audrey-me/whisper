{"ast":null,"code":"var _jsxFileName = \"/Users/phreetech13/Desktop/RealTimeAudioToText/src/components/Transcribe.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"../App.css\";\nimport { SlMicrophone } from \"react-icons/sl\";\nimport { pipeline } from '@xenova/transformers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Translate() {\n  _s();\n  const [playing, setPlaying] = useState(false);\n  const mediaRecorder = useRef(null);\n  const [audioChunks, setAudioChunks] = useState([]);\n  const [audio, setAudio] = useState(null);\n  const mimeType = \"audio/webm\";\n  const [transcribedText, setTranscribedText] = useState(\"\");\n  const transcribe = async url => {\n    try {\n      let transcriber = await pipeline('automatic-speech-recognition', 'Xenova/whisper-small.en');\n      let result = await transcriber(url);\n      setTranscribedText({\n        text: result\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const getMicrophonePermission = async () => {\n    if (\"MediaRecorder\" in window) {\n      try {\n        const streamData = await navigator.mediaDevices.getUserMedia({\n          audio: true\n        });\n        return streamData;\n      } catch (err) {\n        alert(err.message);\n      }\n    } else {\n      alert(\"The MediaRecorder API is not supported in your browser.\");\n    }\n  };\n  const startRecording = async () => {\n    const stream = await getMicrophonePermission();\n    setPlaying(true);\n    const media = new MediaRecorder(stream, {\n      type: mimeType\n    });\n    mediaRecorder.current = media;\n    const localAudioChunks = [];\n    mediaRecorder.current.ondataavailable = event => {\n      if (typeof event.data === \"undefined\") return;\n      if (event.data.size === 0) return;\n      localAudioChunks.push(event.data);\n      setAudioChunks(localAudioChunks);\n    };\n    mediaRecorder.current.start(5000);\n  };\n  const stopRecording = () => {\n    setPlaying(false);\n    mediaRecorder.current.stop();\n    mediaRecorder.current.onstop = async () => {\n      const audioBlob = new Blob(audioChunks, {\n        type: mimeType\n      });\n      const arrayBuffer = await audioBlob.arrayBuffer();\n      const audioUrl = URL.createObjectURL(audioBlob);\n      setAudio(audioUrl);\n      const buffer = new Uint8Array(arrayBuffer);\n      const contentLength = buffer.length.toString();\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        const audioDataUrl = reader.result;\n        transcribe(audioDataUrl);\n        setAudioChunks([]);\n      };\n      reader.readAsDataURL(audioBlob);\n    };\n  };\n  useEffect(() => {\n    if (audioChunks.length > 0) {\n      const audioBlob = new Blob(audioChunks, {\n        type: mimeType\n      });\n      const audioUrl = URL.createObjectURL(audioBlob);\n      setAudio(audioUrl);\n    }\n  }, [audioChunks]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"translate-audio\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"translate-overlay\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"translated-words\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: transcribedText.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), audio && /*#__PURE__*/_jsxDEV(\"audio\", {\n        src: audio,\n        controls: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logic-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(Link, {\n          to: \"/\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"logic-btn-orange back-btn\",\n            children: \"back\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"logic-btn-orange\",\n          onClick: playing ? stopRecording : startRecording,\n          children: [/*#__PURE__*/_jsxDEV(SlMicrophone, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this), playing ? \"Stop\" : \"Start\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n}\n_s(Translate, \"6lv8q4CnFJzjALML16kDCo2lX+o=\");\n_c = Translate;\nvar _c;\n$RefreshReg$(_c, \"Translate\");","map":{"version":3,"names":["React","useState","useRef","useEffect","Link","SlMicrophone","pipeline","jsxDEV","_jsxDEV","Translate","_s","playing","setPlaying","mediaRecorder","audioChunks","setAudioChunks","audio","setAudio","mimeType","transcribedText","setTranscribedText","transcribe","url","transcriber","result","text","error","console","log","getMicrophonePermission","window","streamData","navigator","mediaDevices","getUserMedia","err","alert","message","startRecording","stream","media","MediaRecorder","type","current","localAudioChunks","ondataavailable","event","data","size","push","start","stopRecording","stop","onstop","audioBlob","Blob","arrayBuffer","audioUrl","URL","createObjectURL","buffer","Uint8Array","contentLength","length","toString","reader","FileReader","onloadend","audioDataUrl","readAsDataURL","className","children","fileName","_jsxFileName","lineNumber","columnNumber","src","controls","to","onClick","_c","$RefreshReg$"],"sources":["/Users/phreetech13/Desktop/RealTimeAudioToText/src/components/Transcribe.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"../App.css\";\nimport { SlMicrophone } from \"react-icons/sl\";\nimport { pipeline } from '@xenova/transformers';\n\nexport default function Translate() {\n  const [playing, setPlaying] = useState(false);\n  const mediaRecorder = useRef(null);\n  const [audioChunks, setAudioChunks] = useState([]);\n  const [audio, setAudio] = useState(null);\n  const mimeType = \"audio/webm\";\n  const [transcribedText, setTranscribedText] = useState(\"\"); \n\n  const transcribe = async (url) => {\n    try {\n      let transcriber = await pipeline(\n        'automatic-speech-recognition',\n        'Xenova/whisper-small.en'\n      );\n      let result = await transcriber(url);\n      setTranscribedText({ text: result });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const getMicrophonePermission = async () => {\n    if (\"MediaRecorder\" in window) {\n      try {\n        const streamData = await navigator.mediaDevices.getUserMedia({\n          audio: true,\n        });\n        return streamData;\n      } catch (err) {\n        alert(err.message);\n      }\n    } else {\n      alert(\"The MediaRecorder API is not supported in your browser.\");\n    }\n  };\n\n  const startRecording = async () => {\n    const stream = await getMicrophonePermission();\n    setPlaying(true);\n    const media = new MediaRecorder(stream, { type: mimeType });\n    mediaRecorder.current = media;\n    const localAudioChunks = [];\n    mediaRecorder.current.ondataavailable = (event) => {\n      if (typeof event.data === \"undefined\") return;\n      if (event.data.size === 0) return;\n      localAudioChunks.push(event.data);\n      setAudioChunks(localAudioChunks);\n    };\n    mediaRecorder.current.start(5000);\n  };\n\n  const stopRecording = () => {\n    setPlaying(false);\n    mediaRecorder.current.stop();\n    mediaRecorder.current.onstop = async () => {\n      const audioBlob = new Blob(audioChunks, { type: mimeType });\n      const arrayBuffer = await audioBlob.arrayBuffer();\n      const audioUrl = URL.createObjectURL(audioBlob);\n      setAudio(audioUrl);\n\n      const buffer = new Uint8Array(arrayBuffer);\n      const contentLength = buffer.length.toString();\n\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        const audioDataUrl = reader.result;\n        transcribe(audioDataUrl);\n        setAudioChunks([]);\n      };\n      reader.readAsDataURL(audioBlob);\n    };\n  };\n\n  useEffect(() => {\n    if (audioChunks.length > 0) {\n      const audioBlob = new Blob(audioChunks, { type: mimeType });\n      const audioUrl = URL.createObjectURL(audioBlob);\n      setAudio(audioUrl);\n    }\n  }, [audioChunks]);\n\n  return (\n    <div className=\"translate-audio\">\n      <div className=\"translate-overlay\">\n        <div className=\"translated-words\">\n          {/* Display the transcribed text here */}\n          <p>{transcribedText.text}</p>\n        </div>\n        {audio && <audio src={audio} controls />}\n        <div className=\"logic-buttons\">\n          <Link to=\"/\">\n            <button className=\"logic-btn-orange back-btn\">back</button>\n          </Link>\n          <button\n            className=\"logic-btn-orange\"\n            onClick={playing ? stopRecording : startRecording}\n          >\n            <SlMicrophone />\n            {playing ? \"Stop\" : \"Start\"}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}