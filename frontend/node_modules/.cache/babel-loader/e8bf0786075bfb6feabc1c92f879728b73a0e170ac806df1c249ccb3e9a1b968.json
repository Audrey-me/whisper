{"ast":null,"code":"var _jsxFileName = \"/Users/phreetech13/Desktop/RealTimeAudioToText/src/components/Transcribe.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"../App.css\";\nimport { SlMicrophone } from \"react-icons/sl\";\nimport { pipeline } from '@xenova/transformers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Translate() {\n  _s();\n  const [playing, setPlaying] = useState(false);\n  const mediaRecorder = useRef(null);\n  const [audioChunks, setAudioChunks] = useState([]);\n  const [audio, setAudio] = useState(null);\n  const mimeType = \"audio/webm\";\n  const [transcribedText, setTranscribedText] = useState(\"\");\n  const transcribe = async url => {\n    try {\n      const response = await fetch(url, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          fileUrl: url,\n          lang: \"english\"\n        })\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to transcribe audio\");\n      }\n      const result = await response.json();\n      const transcribedResult = {\n        text: result.text\n      };\n      setTranscribedText(transcribedResult.text);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const getMicrophonePermission = async () => {\n    if (\"MediaRecorder\" in window) {\n      try {\n        const streamData = await navigator.mediaDevices.getUserMedia({\n          audio: true\n        });\n        return streamData;\n      } catch (err) {\n        alert(err.message);\n      }\n    } else {\n      alert(\"The MediaRecorder API is not supported in your browser.\");\n    }\n  };\n\n  // const startRecording = async () => {\n  //   const stream = await getMicrophonePermission();\n  //   setPlaying(true);\n  //   const media = new MediaRecorder(stream, { type: mimeType });\n  //   mediaRecorder.current = media;\n  //   const localAudioChunks = [];\n  //   mediaRecorder.current.ondataavailable = (event) => {\n  //     if (typeof event.data === \"undefined\") return;\n  //     if (event.data.size === 0) return;\n  //     localAudioChunks.push(event.data);\n  //     setAudioChunks(localAudioChunks);\n  //   };\n  //   mediaRecorder.current.start(5000);\n  // };\n\n  // const stopRecording = () => {\n  //   setPlaying(false);\n  //   mediaRecorder.current.stop();\n  //   mediaRecorder.current.onstop = () => {\n  //     const audioBlob = new Blob(audioChunks, { type: mimeType });\n  //     const audioUrl = URL.createObjectURL(audioBlob);\n  //     setAudio(audioUrl);\n\n  //     const reader = new FileReader();\n  //     reader.onloadend = () => {\n  //       const audioDataUrl = reader.result;\n  //       transcribe(audioDataUrl);\n  //       setAudioChunks([]);\n  //     };\n  //     reader.readAsDataURL(audioBlob);\n  //   };\n  // };\n\n  useEffect(() => {\n    if (audioChunks.length > 0) {\n      const audioBlob = new Blob(audioChunks, {\n        type: mimeType\n      });\n      const audioUrl = URL.createObjectURL(audioBlob);\n      setAudio(audioUrl);\n    }\n  }, [audioChunks]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"translate-audio\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"translate-overlay\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"translated-words\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: transcribedText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), audio && /*#__PURE__*/_jsxDEV(\"audio\", {\n        src: audio,\n        controls: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logic-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(Link, {\n          to: \"/\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"logic-btn-orange back-btn\",\n            children: \"back\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"logic-btn-orange\",\n          onClick: playing ? stopRecording : startRecording,\n          children: [/*#__PURE__*/_jsxDEV(SlMicrophone, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 13\n          }, this), playing ? \"Stop\" : \"Start\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n}\n_s(Translate, \"6lv8q4CnFJzjALML16kDCo2lX+o=\");\n_c = Translate;\nvar _c;\n$RefreshReg$(_c, \"Translate\");","map":{"version":3,"names":["React","useState","useRef","useEffect","Link","SlMicrophone","pipeline","jsxDEV","_jsxDEV","Translate","_s","playing","setPlaying","mediaRecorder","audioChunks","setAudioChunks","audio","setAudio","mimeType","transcribedText","setTranscribedText","transcribe","url","response","fetch","method","headers","body","JSON","stringify","fileUrl","lang","ok","Error","result","json","transcribedResult","text","error","console","log","getMicrophonePermission","window","streamData","navigator","mediaDevices","getUserMedia","err","alert","message","length","audioBlob","Blob","type","audioUrl","URL","createObjectURL","className","children","fileName","_jsxFileName","lineNumber","columnNumber","src","controls","to","onClick","stopRecording","startRecording","_c","$RefreshReg$"],"sources":["/Users/phreetech13/Desktop/RealTimeAudioToText/src/components/Transcribe.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"../App.css\";\nimport { SlMicrophone } from \"react-icons/sl\";\nimport { pipeline } from '@xenova/transformers';\n\nexport default function Translate() {\n  const [playing, setPlaying] = useState(false);\n  const mediaRecorder = useRef(null);\n  const [audioChunks, setAudioChunks] = useState([]);\n  const [audio, setAudio] = useState(null);\n  const mimeType = \"audio/webm\";\n  const [transcribedText, setTranscribedText] = useState(\"\");\n\n  const transcribe = async (url) => {\n    try {\n      const response = await fetch(url, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ fileUrl: url, lang: \"english\" }),\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to transcribe audio\");\n      }\n\n      const result = await response.json();\n      const transcribedResult = { text: result.text };\n      setTranscribedText(transcribedResult.text);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const getMicrophonePermission = async () => {\n    if (\"MediaRecorder\" in window) {\n      try {\n        const streamData = await navigator.mediaDevices.getUserMedia({\n          audio: true,\n        });\n        return streamData;\n      } catch (err) {\n        alert(err.message);\n      }\n    } else {\n      alert(\"The MediaRecorder API is not supported in your browser.\");\n    }\n  };\n\n  // const startRecording = async () => {\n  //   const stream = await getMicrophonePermission();\n  //   setPlaying(true);\n  //   const media = new MediaRecorder(stream, { type: mimeType });\n  //   mediaRecorder.current = media;\n  //   const localAudioChunks = [];\n  //   mediaRecorder.current.ondataavailable = (event) => {\n  //     if (typeof event.data === \"undefined\") return;\n  //     if (event.data.size === 0) return;\n  //     localAudioChunks.push(event.data);\n  //     setAudioChunks(localAudioChunks);\n  //   };\n  //   mediaRecorder.current.start(5000);\n  // };\n\n  // const stopRecording = () => {\n  //   setPlaying(false);\n  //   mediaRecorder.current.stop();\n  //   mediaRecorder.current.onstop = () => {\n  //     const audioBlob = new Blob(audioChunks, { type: mimeType });\n  //     const audioUrl = URL.createObjectURL(audioBlob);\n  //     setAudio(audioUrl);\n\n  //     const reader = new FileReader();\n  //     reader.onloadend = () => {\n  //       const audioDataUrl = reader.result;\n  //       transcribe(audioDataUrl);\n  //       setAudioChunks([]);\n  //     };\n  //     reader.readAsDataURL(audioBlob);\n  //   };\n  // };\n\n  useEffect(() => {\n    if (audioChunks.length > 0) {\n      const audioBlob = new Blob(audioChunks, { type: mimeType });\n      const audioUrl = URL.createObjectURL(audioBlob);\n      setAudio(audioUrl);\n    }\n  }, [audioChunks]);\n\n  return (\n    <div className=\"translate-audio\">\n      <div className=\"translate-overlay\">\n        <div className=\"translated-words\">\n          {/* Display the transcribed text here */}\n          <p>{transcribedText}</p>\n        </div>\n        {audio && <audio src={audio} controls />}\n        <div className=\"logic-buttons\">\n          <Link to=\"/\">\n            <button className=\"logic-btn-orange back-btn\">back</button>\n          </Link>\n          <button\n            className=\"logic-btn-orange\"\n            onClick={playing ? stopRecording : startRecording}\n          >\n            <SlMicrophone />\n            {playing ? \"Stop\" : \"Start\"}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}